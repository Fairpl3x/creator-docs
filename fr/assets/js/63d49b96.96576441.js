"use strict";(self.webpackChunkVRChat_Creator_Docs=self.webpackChunkVRChat_Creator_Docs||[]).push([[2450],{39891:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var r=a(74848),n=a(28453);const s={title:"Avatar Events",slug:"avatar-events",hidden:!1,createdAt:"2023-06-22T01:23:45.678Z",updatedAt:"2023-07-19T01:23:45.678Z"},i=void 0,o={id:"worlds/udon/avatar-events",title:"Avatar Events",description:"These events allow Udon to react to changes regarding player avatars.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/worlds/udon/avatar-events.md",sourceDirName:"worlds/udon",slug:"/worlds/udon/avatar-events",permalink:"/creator-docs-i18n/fr/worlds/udon/avatar-events",draft:!1,unlisted:!1,editUrl:"https://github.com/FairplexVR/creator-docs/edit/main/Docs/i18n/fr/docusaurus-plugin-content-docs/current/worlds/udon/avatar-events.md",tags:[],version:"current",lastUpdatedBy:"Fairplex",lastUpdatedAt:1713665446,formattedLastUpdatedAt:"21 avr. 2024",frontMatter:{title:"Avatar Events",slug:"avatar-events",hidden:!1,createdAt:"2023-06-22T01:23:45.678Z",updatedAt:"2023-07-19T01:23:45.678Z"},sidebar:"tutorialSidebar",previous:{title:"Animation Events",permalink:"/creator-docs-i18n/fr/worlds/udon/animation-events"},next:{title:"Debugging Udon Projects",permalink:"/creator-docs-i18n/fr/worlds/udon/debugging-udon-projects"}},d={},h=[{value:"OnAvatarChanged",id:"onavatarchanged",level:2},{value:"Persisted eye heights",id:"persisted-eye-heights",level:3},{value:"OnAvatarEyeHeightChanged",id:"onavatareyeheightchanged",level:2},{value:"First avatar load",id:"first-avatar-load",level:3},{value:"Avatar changes, remote players, and event ordering",id:"avatar-changes-remote-players-and-event-ordering",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"These events allow Udon to react to changes regarding player avatars."}),"\n",(0,r.jsx)(t.h2,{id:"onavatarchanged",children:"OnAvatarChanged"}),"\n",(0,r.jsxs)(t.p,{children:["Returns ",(0,r.jsx)(t.code,{children:"VRCPlayerApi"})," object for the instigating player. Called when a player's avatar has finished loading."]}),"\n",(0,r.jsx)(t.h3,{id:"persisted-eye-heights",children:"Persisted eye heights"}),"\n",(0,r.jsxs)(t.p,{children:["Players will sync any variance from their prefab eye height after their avatar loads, triggering an ",(0,r.jsx)(t.code,{children:"OnAvatarEyeHeightChanged"})," event."]}),"\n",(0,r.jsxs)(t.p,{children:["If the ",(0,r.jsx)(t.code,{children:"VRCPlayerApi"})," object is for the local player, retrieving its eye height will return the prefab height during this event."]}),"\n",(0,r.jsxs)(t.p,{children:["If the ",(0,r.jsx)(t.code,{children:"VRCPlayerApi"})," object is for a remote player, be aware that the remote player may not have synced their new eye height yet, and you should not rely on the returned value in this case."]}),"\n",(0,r.jsx)(t.h2,{id:"onavatareyeheightchanged",children:"OnAvatarEyeHeightChanged"}),"\n",(0,r.jsxs)(t.p,{children:["Returns a ",(0,r.jsx)(t.code,{children:"VRCPlayerApi"})," object for the instigating player and a ",(0,r.jsx)(t.code,{children:"float"})," describing their previous or previously synced eye height in meters. Called when a player has their eye height change via switching to another avatar or via the ",(0,r.jsx)(t.a,{href:"/worlds/udon/players/player-avatar-scaling",children:"avatar scaling system"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"first-avatar-load",children:"First avatar load"}),"\n",(0,r.jsxs)(t.p,{children:["When a local or remote user joins a world, the first previous eye height value received for that user may be ",(0,r.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"avatar-changes-remote-players-and-event-ordering",children:"Avatar changes, remote players, and event ordering"}),"\n",(0,r.jsxs)(t.p,{children:["When a ",(0,r.jsx)(t.strong,{children:"local"})," user changes their avatar and applies a persisted eye height (if they have one saved that differs from their prefab height), this event should only execute for their persisted height."]}),"\n",(0,r.jsxs)(t.p,{children:["When a ",(0,r.jsx)(t.strong,{children:"remote"})," user changes their avatar and applies a persisted eye height (if they have one saved that differs from their prefab eye height), this event may execute more than once."]}),"\n",(0,r.jsxs)(t.p,{children:["For remote players, you will receive this event every time a new eye height is synced to you by the remote player. This means that you could receive an ",(0,r.jsx)(t.code,{children:"OnAvatarEyeHeightChanged"})," event prior to an ",(0,r.jsx)(t.code,{children:"OnAvatarChanged"})," event, but you should not receive ",(0,r.jsx)(t.code,{children:"OnAvatarEyeHeightChanged"})," events out of order."]}),"\n",(0,r.jsx)(t.admonition,{title:"More Info",type:"note",children:(0,r.jsxs)(t.p,{children:["See ",(0,r.jsx)(t.a,{href:"/worlds/udon/players/player-avatar-scaling",children:"Player Avatar Scaling"})," for more info about this feature."]})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);